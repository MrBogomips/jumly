extends _layouts/default

block title
  title JUMLY, Advanced modern rendering enging for UML diagram with JavaScript/HTML5/CSS

block prepend description
  - var _ = "JUMLY must help you if you want some sequence diagrams in your web site.";
  -    _ += " Without images and expensive heavy UML modeling tools,";
  -    _ += " you can put sequence diagrams as easy as writing a few lines of JavaScript.";
  - var __description = _;

block styles
  link(rel='stylesheet', href="/index.css")
  link(rel='stylesheet', href="/public/css/skin.simple.css")
  link(rel='stylesheet', href="/public/css/skin.fancy.css")
  :stylus
    .tooltip
      font-size 12px
      text-shadow none

block content
  .container
    .row
      .span2
        #quick-links
          ul.inner
            li: a(href="http://tmtk75.github.com") author's blog

          .inner
            a(href="https://twitter.com/tmtk75"): img.icon(src="#{paths.images}/twitter_alt.png")
            a(href="https://www.facebook.com/tomotaka.sakuma"): img.icon(src="#{paths.images}/facebook.png")
            a(href="https://github.com/tmtk75"): img.icon(src="#{paths.images}/github_alt.png")
            a(href="https://plus.google.com/u/0/112810316775699020282/"): img.icon(src="#{paths.images}/google.png")
            a(href="http://www.linkedin.com/profile/view?id=88237980&trk=tab_pro"): img.icon(src="#{paths.images}/linkedin.png")

      .span8
        h1.logo
          .brand JUMLY
        
        #intro
          p
            | JUMLY is a JavaScript library for UML diagram rendering engine.
            | It works completely on client side.
            | Using JUMLY, you can easily embed stylish UML diagrams on your HTML document.  
            | You need nothing to use JUMLY except for modern browser.

        include _includes/heads-up

        #popular-links 
          .buttons
            a.button.try-jumly(href='/try.html',title="Interactive Demo",data-placement="right") Try JUMLY
          .buttons
            a.button.reference(href='/reference.html') Reference Manual
          .buttons
            a.button.apidocs(href='/api.html') API Document

        #example1("data-bind"="css:{normal:example1.normal,simple:example1.simple,fancy:example1.fancy}")
          :jumly(type=sequence)
            @found "You", ->
              @message "Think", ->
                @message "Write your idea", "JUMLY", ->
                  @create "Diagram"
          :code(type=javascript)
            @found "You", ->
              @message "Think", ->
                @message "Write your idea", "JUMLY", ->
                  @create "Diagram"

          .buttons
            label(for="example1-styles-a")
              a.button("data-bind"="css:{selected:example1.normal}") normal
            label(for="example1-styles-b")
              a.button("data-bind"="css:{selected:example1.simple}") simple
            label(for="example1-styles-c")
              a.button("data-bind"="css:{selected:example1.fancy}") fancy
            input#example1-styles-a(type="radio",name="example1_styles",value="normal","data-bind"="checked:example1.styles",style="display:none")
            input#example1-styles-b(type="radio",name="example1_styles",value="simple","data-bind"="checked:example1.styles",style="display:none")
            input#example1-styles-c(type="radio",name="example1_styles",value="fancy","data-bind"="checked:example1.styles",style="display:none")

        #getting-started
          h2 Getting Started
          p
            | Let's say you already have a document.
            | In case you put a sequence diagram into it, put next four lines in your &lt;head>.

          :code(type=xml)
            &lt;link href='https://jumly.herokuapp.com/#{paths.release}/jumly.min.css' rel='stylesheet'/>
            &lt;script src='http://code.jquery.com/jquery-#{tested_version.jquery}.min.js'>&lt;/script>
            &lt;script src='http://coffeescript.org/extras/coffee-script.js'>&lt;/script>
            &lt;script src='https://jumly.herokuapp.com/#{paths.release}/jumly.min.js'>&lt;/script>

          p
            | Then, put a next &lt;script> element into the place where you want to put at.

          :code(type=xml)
            &lt;script type='text/jumly+sequence'>
            @found "You", ->
              @message "get", "JUMLY"
            &lt;/script>

          p
            | That's all.
            | It's easy, isn't it?

          :jumly(type=sequence)
            @found "You", ->
              @message "get", "JUMLY"

          p
            | You'll get the above one there. To get it, you only write just eight-lines.
            | It's certainly that you can add another or more diagrams.

          p
            | Here is a HTML file for <a href="public/examples/simple.html">one of simplest examples</a>.
            | Take a look at the source.

        #bg-why.row
          .span4
            h2 These things before?
            dl
              dt To do a lot
              dd Getting many small diagrams which have a few icons and relationships. 
               | Then you launched an UML modeling tool, and create a new project, and make a model, ...
              dt Unsightly looks 
              dd There was something you don't like at diagram which application generated.
               | For instance, color, size, line width, font, space b/w objects and so on.
              dt Not reusable
              dd Wanted to copy a string, like a class name and something phrase, from UML note icon.
               | If it's an image, you never do that.
              input#read_more-there_things(type="checkbox","data-bind"="checked:read_more.there_things._visible",style="display:none")
              label(for="read_more-there_things")
                a("data-bind"="text:read_more.there_things.text")
              .more("data-bind"="visible:read_more.there_things._visible")
                dt What changed?
                dd Can't see difference b/w old diagram and updated one.
                dt Not viewable
                dd Can't open a file created by modeling application on other computer you don't usually use.
              
          .span4
            h2 Why you like JUMLY
            dl
              dt Easy to use
              dd To use JUMLY, you need only a web browser and a text editor you get used to.
              dt Fast for everything
              dd The time you get a diagram since you want it, the time JUMLY render diagram, the time you know JUMLY
               | and or so are shorter.
              dt Everything is text
              dd Input data is text, and output format is text/html.<br/>
               | It's great advantage to proprietary binnary data format,
               | because we can use SCM like Subversion/Mercurial/Git to manage and version the data.
              input#read_more-why_you_like(type="checkbox","data-bind"="checked:read_more.why_you_like._visible",style="display:none")
              label(for="read_more-why_you_like")
                a More...
              .more("data-bind"="visible:read_more.why_you_like._visible")
                dt High quality
                dd You can get keen designed diagrams, especially on MacOSX
                dt Based on DOM, jQuery and HTML5/CSS3
                dd Diagrams JUMLY renders are composed with DOM, jQuery and HTML5/CSS3,
                 | so you've already understood the way to handle them.
                 | For example, you can edit font-size and color of icons or animate them applying CSS3.
                dt CoffeeScript-base DSL
                dd DSL of JUMLY is completely CoffeeScript.
                 | If you need, you can use "if", "for" or so its statements.
                dt Light and small
                dd Now the size of script is 56KB, and the size of stylesheet is 16KB.
                 | They are relatively lighter than the UML modeling tools =)

        #new-feature-robustness
          h2 New Feature
          p Robustness diagram is coming soon.
           |Actually, I'm considering the DSL and layout logic now...

          :jumly(type=robustness)
            @actor "User" :-> @view "Browser"
            @view "Browser" :-> @controller "Server"
            @controller "Server" :-> @entity "Database"
          :code(type=javascript)
            @actor "User" :-> @view "Browser"
            @view "Browser" :-> @controller "Server"
            @controller "Server" :-> @entity "Database"

          p Class diagram is coming soon, too.
          
          :jumly(type=class)
            @def
              myattr:
                run: {}

  #examples
    .container
      .row
        .span2
        .span8
          h2 Examples
          
          .example
            :jumly
              @found "User", ->
                @message "search", "Browser", ->
                  @create asynchronous:"connection", "Web Server"
                  @message "GET", "Web Server", ->
                    @message "find the resource", -> @reply ""
                  @reply "", "User"
            :code
              @found "User", ->
                @message "search", "Browser", ->
                  @create asynchronous:"connection", "Web Server"
                  @message "GET", "Web Server", ->
                    @message "find the resource", -> @reply ""
                  @reply "", "User"

          .example
            :jumly
              @found "You", ->
                @alt
                  "[found]": ->
                    @loop ->
                      @message "request", "HTTP Server"
                      @note "NOTE: This diagram doesn't make sense :) just an example"
                  "[missing]": ->
                    @message "new", "HTTP Session"
                @ref "respond resource"
             :code
              @found "You", ->
                @alt
                  "[found]": ->
                    @loop ->
                      @message "request", "HTTP Server"
                      @note "NOTE: This doesn't make sense :)"
                  "[missing]": ->
                    @message "new", "HTTP Session"
                @ref "respond resource"

          .example
            :jumly
              @found "Browser", ->
                @message "http request", "HTTP Server", ->
                  @create "HTTP Session", ->
                    @message "init"
                    @message "aquire lock", "Database"
                  @message "select service", ->
                    @ref "do biz logic"
                  @message "release lock", "Database"
                  @reply "", "Browser"
            :code
              @found "Browser", ->
                @message "http request", "HTTP Server", ->
                  @create "HTTP Session", ->
                    @message "init"
                    @message "aquire lock", "Database"
                  @message "do something"
                  @message "release lock", "Database"
                  @reply "", "Browser"

          .example
            :jumly
              @found "Browser", ->
                @alt {
                  "[200]": -> @message "GET href resources", "HTTP Server"
                  "[301]": -> @ref "GET the moved page"
                  "[404]": -> @ref "show NOT FOUND"
                }
              @find(".ref").css(width:256, "padding-bottom":4)
                .find(".tag").css float:"left"
              get_the_moved_page.css "background-color":"#80c080"
              show_not_found.css "background-color":"#f0b0b0" 
            :code
              @found "Browser", ->
                @alt {
                  "[200]": -> @message "GET href resources", "HTTP Server"
                  "[301]": -> @ref "GET the moved page"
                  "[404]": -> @ref "show NOT FOUND"
                }
              @find(".ref").css(width:256, "padding-bottom":4)
                .find(".tag").css float:"left"
              get_the_moved_page.css "background-color":"#80c080"
              show_not_found.css "background-color":"#f0b0b0" 

  #document-support-information
    .container
      .row
        .span2
        .span8
          .row
            .span4
              h2 Document
              ul.document
                li
                  a(href="/reference") Reference Manual
                li
                  a(href="/api.html") API Document

              ul.document
                li Mar 24, 2013
                  ul: li Dropped Japanaese page (maintenance was troublesome...)
              
              h2 Examples
              ul.examples
                li: a(href="/public/examples/simple.html") A simple sequence diagram
                li: a(href="/public/examples/APNS.html") APNS (Apple push notification service) sequence
                li: a(href="/public/examples/robustness.html") Robustness diagram prototype
                li: a(href="/public/examples/api-scan.html") API scan example


            .span4
              h2 History
              ul.history
                li 0.1.5-1, Jun 23, 2013
                  ul
                    li <a href='https://github.com/tmtk75/jumly/wiki/REST-API'>REST API to generate image</a>
                li 0.1.4, May 20, 2013
                  ul
                    li Replaced canvas with svg
                li 0.1.3c, Apr 29, 2013
                  ul
                    li
                      | Fixed&nbsp;
                      a(href="https://github.com/tmtk75/jumly/issues/11") #11,
                      a(href="https://github.com/tmtk75/jumly/issues/15") #15,
                      a(href="https://github.com/tmtk75/jumly/issues/16") #16
                li 0.1.3b, Apr 27, 2013
                  ul
                    li: a(href="/api.html#_JUMLY_scan") API JUMLY.scan (beta)
                li 0.1.3a, Mar 29, 2013
                  ul
                    li Robustness diagram prototyping
                    li Fixed pollution of jQuery namespace with some funcitons
                li 0.1.2b, Jan 9, 2013
                  ul
                    li <a href='/reference#_fragment'>@fragment directive</a>
                li 0.1.2a, Dec 31, 2012
                  ul
                    li Fixed
                      a(href='https://github.com/tmtk75/jumly/issues/4')&nbsp;#4
                li
                  a(href="/try.html") Try JUMLY, Dec 29, 2012
                  ul
                    li interactive demo for sequence diagram
                li 0.1.2, Dec 29, 2012
                  ul
                    li change CSS class name for .participant, which was .object
                li
                  a(href="/reference.html") Reference Manual r1, Dec 10, 2012
                  ul
                    li about some directives of sequence diagram
                li 0.1.1, Nov 29, 2012
                  ul
                    li support <a href="/reference.html#_note">@note</a> directive
                    li adjust margins and spaces in stylesheet
                li 0.1.0, Nov 23, 2012
                  ul
                    li support sequence diagram

  #meta-information
    .container
      .row
        .span2
        .span8
          .row
            .span4
              #requirement
                h2 Requirement
                p
                  | JUMLY is tested on <a href='http://jquery.com/'>jQuery</a> #{tested_version.jquery}
                  | and <a href='http://coffeescript.org/'>CoffeeScript</a> #{tested_version.coffeescript},
                  | and they or later are recommended on you.
                p
                  | WebKit-base browser like Google Chrome and Safari,
                  | Gecko-base browser like Firefox,
                  | or Opera are recommended.
                  | Internet Explorer has never been tested.

            .span4
              #license
                h2 License
                p
                  | JUMLY v#{version} is under <a href="http://opensource.org/licenses/MIT">MIT license</a>.<br>
                  | Perhapse, license for newer versions may be changed to another one in the future.
                  | In that case, you can still use old version's JUMLY with MIT license.
          .row
            .span4
              #privacy-policy
                h2 Privacy Policy
                p This site utilizes Google Analytics (GA) and provides first party cookie of GA to your browser.
                 | I just only use the data, which is collected by GA, in order to improve the contents, accessibility, usability and readability of this site.
                 | And also about the data, I never disclose and use it for another purpose.

          
          footer
            .copyright
              include _includes/copyright

            .fork-me
              a(href="https://github.com/tmtk75/jumly")
                img(style="position: absolute; top: 0; left: 0; border: 0;",src="https://s3.amazonaws.com/github/ribbons/forkme_left_green_007200.png",alt="Fork me on GitHub")

block scripts
  script(src="public/bootstrap/docs/assets/js/bootstrap-tooltip.js")
  :coffeescript
    $ ->
      $("a.button.try-jumly").tooltip()

  :coffeescript
    model =
      read_more:
        why_you_like: _visible: ko.observable false
        there_things: _visible: ko.observable false
      example1:
        styles: ko.observable "normal"
    
    f = (g)-> ko.dependentObservable -> if g() then "Hide" else "More..."
    model.read_more.why_you_like.text = f model.read_more.why_you_like._visible
    model.read_more.there_things.text = f model.read_more.there_things._visible
    model.example1.normal = ko.dependentObservable -> model.example1.styles() is 'normal'
    model.example1.simple = ko.dependentObservable -> model.example1.styles() is 'simple'
    model.example1.fancy = ko.dependentObservable -> model.example1.styles() is 'fancy'

    ko.applyBindings model, document.body

